# -*- coding: UTF-8 -*-
import os
import face_recognition
import numpy as np 
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import KFold
import sys
import joblib

 
feature_vector =
      [-5.35460114e-02,  1.04834020e-01,  5.82005121e-02, -6.23208508e-02,
       -1.20127812e-01,  1.96827948e-03, -5.26909046e-02, -1.48328632e-01,
        1.40360817e-01, -1.83582366e-01,  2.92252243e-01, -4.40107957e-02,
       -2.58373767e-01, -6.49820864e-02, -9.75040272e-02,  1.82915911e-01,
       -1.69353127e-01, -1.72871873e-01, -3.09200957e-03,  1.92176402e-02,
        1.39653653e-01, -3.87317967e-03, -9.71483812e-03, -1.26913041e-02,
       -1.15593120e-01, -3.33911508e-01, -8.65109414e-02, -4.07476537e-02,
       -8.06936529e-03, -2.69682854e-02,  4.08813357e-04,  2.26994678e-02,
       -1.91396594e-01, -6.81699812e-03,  1.64208487e-02,  4.21346948e-02,
       -1.88420266e-02, -1.22717232e-01,  1.69042647e-01,  1.89623684e-02,
       -2.56160080e-01, -2.84627825e-02,  4.24961895e-02,  2.31859580e-01,
        1.12237439e-01, -1.78524479e-02,  2.50930637e-02, -1.46954864e-01,
        8.54523852e-02, -1.76840782e-01, -3.83254662e-02,  1.37237057e-01,
        6.43749982e-02,  1.06844231e-02,  4.35163304e-02, -1.25800580e-01,
        4.30877805e-02,  1.09991103e-01, -1.25825286e-01,  5.86707704e-03,
        8.21919292e-02, -1.09344438e-01, -2.91415881e-02, -1.44264624e-01,
        2.21533746e-01,  1.96443237e-02, -1.20953053e-01, -1.66505635e-01,
        1.67302951e-01, -7.43293017e-02, -9.87448469e-02,  6.81607723e-02,
       -1.66401953e-01, -1.93900943e-01, -2.80322611e-01, -2.19210982e-04,
        4.29982752e-01,  1.07281283e-01, -1.44085288e-01,  6.85325563e-02,
       -1.74324848e-02,  1.43818334e-02,  1.32702723e-01,  1.74371064e-01,
        5.35300560e-02,  1.86751783e-02, -1.02722272e-01,  2.70277858e-02,
        2.23684043e-01, -1.13195933e-01, -4.55808230e-02,  2.04259604e-01,
       -7.41649270e-02,  5.93469217e-02, -4.95752320e-03,  3.34659964e-03,
       -8.24945569e-02,  8.91204998e-02, -1.13434434e-01,  1.51956454e-02,
        3.77987996e-02, -4.49024923e-02, -1.01753324e-02,  1.26429066e-01,
       -1.01504065e-01,  6.88797235e-03, -1.36315450e-02,  1.25340782e-02,
        4.25134674e-02, -3.16483825e-02, -1.22000337e-01, -7.01046735e-02,
        8.97571370e-02, -2.42341787e-01,  2.04496995e-01,  1.70595497e-01,
        6.61701858e-02,  8.83736014e-02,  1.50460765e-01,  4.80800048e-02,
        2.50568688e-02, -4.27672938e-02, -2.44506165e-01, -5.89822307e-02,
        6.45350441e-02, -4.25964147e-02,  5.43840826e-02, -5.32909557e-02]


TEST_image = 'test_image/man11.jpg'
cur_image = face_recognition.load_image_file(TEST_image)
feature_vector = face_recognition.face_encodings(cur_image)[0]
model = joblib.load('trained_model/gaussian_regression.model')
pre = model.predict(np.array([feature_vector]))
print("predict score:", pre)


sys.exit(1)

X = [
    [1,2,3],
    [1,2,3],
    [1,2,3]
]

for index,x in enumerate(X):
    print(index, x)

sys.exit(1)



imgpath = '/Users/a777/Documents/study/研一/上学期课程/人工智能基础/FaceBeautyPrediction/SCUT-FBP550-OFFICIAL/SCUT-FBP5500_v2/Images'

image = os.path.join(imgpath, 'CF121.jpg') #test

 
feature_vector_CF121 = [-1.10037103e-01,  4.56939377e-02,  7.83260614e-02, -8.35666135e-02,
       -1.86326027e-01, -9.44631994e-02,  4.13223766e-02, -1.66953743e-01,
        2.25157857e-01, -1.50924951e-01,  1.19718857e-01, -6.38357103e-02,
       -2.75432140e-01,  6.58598989e-02, -6.06845021e-02,  1.36927366e-01,
       -1.30532801e-01, -1.79585859e-01, -5.58220819e-02, -1.24132328e-01,
        6.41834438e-02,  8.97681490e-02, -5.48036471e-02,  6.11100420e-02,
       -6.06027767e-02, -2.45090514e-01, -1.21965691e-01, -3.41311619e-02,
        5.23794182e-02, -1.43830925e-02, -2.74247602e-02,  1.08488433e-01,
       -1.82126522e-01, -6.22312091e-02,  1.06834657e-01,  5.64524531e-02,
        1.33403614e-02, -9.80339348e-02,  2.32544884e-01, -7.78761879e-03,
       -1.71968400e-01, -6.47126287e-02,  1.17982984e-01,  2.03456014e-01,
        1.33429974e-01, -2.00628750e-02, -3.90457734e-02, -1.31899193e-01,
        2.01043382e-01, -2.28705287e-01, -1.76271256e-02,  1.59960717e-01,
        8.47164690e-02,  4.89205495e-02,  1.17691457e-01, -2.32668191e-01,
        1.27917230e-02,  1.27660245e-01, -1.92681536e-01,  6.30746260e-02,
        8.02260712e-02, -1.46580443e-01, -6.06438927e-02, -9.73546356e-02,
        1.72722727e-01,  2.58637741e-02, -7.79790282e-02, -1.08563639e-01,
        2.24643052e-01, -1.41387060e-01,  9.76508111e-03,  7.95400962e-02,
       -1.21172689e-01, -1.59472764e-01, -1.58619180e-01,  5.58163226e-03,
        4.36680734e-01,  1.23300932e-01, -1.41067937e-01,  6.07599206e-02,
       -3.08421366e-02, -1.62600279e-02,  1.00052930e-01,  2.43040323e-02,
       -5.89246191e-02,  6.88865781e-03, -8.82271752e-02,  8.42714012e-02,
        2.26943165e-01, -5.04008755e-02,  4.09730673e-02,  2.54624218e-01,
        3.52598727e-04,  7.00203776e-02,  3.06613036e-02,  2.07677633e-02,
       -9.27016363e-02, -3.51819247e-02, -1.86012954e-01,  2.23990753e-02,
        3.51437926e-02, -8.65938291e-02,  2.05206871e-02,  7.89346546e-02,
       -1.63723558e-01,  2.63280496e-02, -3.50125879e-03, -6.66336492e-02,
       -1.52905613e-01, -9.67056304e-02, -1.16766125e-01,  3.15890759e-02,
        1.52485639e-01, -2.29629785e-01,  1.98207289e-01,  9.63815749e-02,
       -6.29509985e-02,  1.72039047e-01, -1.95602775e-02,  1.02767795e-02,
        3.39330882e-02, -1.45906061e-01, -8.82112235e-02, -8.92039984e-02,
        1.31935671e-01, -3.53896543e-02,  4.17264551e-02, -6.50165975e-03]        

feature_vector_AF1161 = [-0.10630707,  0.13151649,  0.10914097, -0.07222323, -0.10426223,
       -0.04896575, -0.05439083, -0.1193632 ,  0.18928871, -0.17583434,
        0.29820848, -0.0710462 , -0.21266563, -0.04282162, -0.06417875,
        0.20622562, -0.21270895, -0.13469066, -0.05662628,  0.05352834,
        0.10921828, -0.01921503, -0.03007745, -0.00336584, -0.14345478,
       -0.3571305 , -0.11022843, -0.01408296, -0.0057223 , -0.03784117,
       -0.02661134,  0.00970975, -0.18404093, -0.04201363, -0.00997215,
        0.06315623, -0.01517037, -0.11578776,  0.13837972, -0.04237404,
       -0.31239039,  0.02020729,  0.06056252,  0.2185768 ,  0.1647068 ,
       -0.01798774,  0.04987839, -0.14351818,  0.13544711, -0.18243557,
       -0.04375509,  0.12474024,  0.08388329,  0.043382  ,  0.02092238,
       -0.14274421,  0.02359244,  0.16462411, -0.12928608, -0.02796335,
        0.098824  , -0.08915952, -0.00803489, -0.09450485,  0.19990294,
        0.05946315, -0.14232756, -0.18954508,  0.11288884, -0.11111379,
       -0.02833918,  0.06022407, -0.16395956, -0.20663011, -0.33352548,
       -0.02027684,  0.38158187,  0.04671077, -0.1136438 ,  0.10494762,
       -0.06312834,  0.0315423 ,  0.06540216,  0.17437732, -0.00108562,
        0.07664275, -0.09159815,  0.03934067,  0.24074417, -0.10445766,
        0.03130504,  0.23351473, -0.04240046,  0.02674797, -0.02711409,
        0.01387312, -0.08049672,  0.06124187, -0.0554912 ,  0.06394257,
        0.04614074, -0.06003353, -0.01081973,  0.08413665, -0.1962408 ,
        0.08221681, -0.00275404,  0.09247275,  0.05634652, -0.0354203 ,
       -0.0652395 , -0.07104816,  0.11948499, -0.26195019,  0.16780643,
        0.18731394,  0.02402255,  0.11889749,  0.13710123,  0.05519009,
       -0.00081623,  0.00937027, -0.20658943,  0.00471472,  0.06604169,
       -0.06461033,  0.06733255, -0.01326101]

feature_vector_CM712 = [-0.17724884,  0.12151417,  0.089646  , -0.15726532, -0.14119625,
        0.01024648, -0.02905101, -0.0590931 ,  0.18961941, -0.13796216,
        0.18204054,  0.10877714, -0.20993038, -0.01835099, -0.07608259,
        0.06963369, -0.10063069, -0.08000704, -0.12699097, -0.13275132,
        0.00771544, -0.01186661, -0.00937605,  0.01735287, -0.08035161,
       -0.16503122, -0.12690009, -0.03292938,  0.10617842, -0.18733071,
        0.04723366, -0.00497389, -0.16310067, -0.07187483, -0.04226156,
        0.04632366, -0.0450154 , -0.05314197,  0.2356493 , -0.06748523,
       -0.1259243 ,  0.04457392,  0.04516899,  0.25434119,  0.14437094,
       -0.02101501, -0.00884832, -0.09883656,  0.25726229, -0.28184736,
        0.063847  ,  0.13995561,  0.13430206,  0.01416976,  0.11342032,
       -0.14170729,  0.07329983,  0.14485991, -0.21209247,  0.13923278,
        0.05613508, -0.10328372, -0.12246273, -0.06768226,  0.09615944,
        0.11099406, -0.12672983, -0.23072158,  0.15286893, -0.12883601,
        0.07339936,  0.21804674, -0.07414485, -0.17090279, -0.17808744,
        0.10741498,  0.42903474,  0.19085445, -0.08215544,  0.04359186,
       -0.14299841, -0.10415429, -0.03858821, -0.00334715, -0.17931469,
       -0.02729513, -0.06800903,  0.12423864,  0.17398059,  0.01121253,
       -0.01204186,  0.24492213,  0.08872326,  0.06408454, -0.04526581,
        0.07896248, -0.1602827 , -0.02318568, -0.0921827 ,  0.04222949,
        0.1180657 , -0.1585339 ,  0.02609998,  0.06108596, -0.16476682,
        0.19555068, -0.04625542,  0.01678994, -0.04669741, -0.03335501,
       -0.15566322,  0.0348727 ,  0.20140198, -0.26503739,  0.19210818,
        0.15147252,  0.01640506,  0.07005697,  0.15872245,  0.02348301,
        0.06296047, -0.05097445, -0.07639002, -0.07694846,  0.06414028,
       -0.13839632,  0.07025026,  0.00911722]

# AF583.jpg
feature_vector_predict = [-5.35460114e-02,  1.04834020e-01,  5.82005121e-02, -6.23208508e-02,
       -1.20127812e-01,  1.96827948e-03, -5.26909046e-02, -1.48328632e-01,
        1.40360817e-01, -1.83582366e-01,  2.92252243e-01, -4.40107957e-02,
       -2.58373767e-01, -6.49820864e-02, -9.75040272e-02,  1.82915911e-01,
       -1.69353127e-01, -1.72871873e-01, -3.09200957e-03,  1.92176402e-02,
        1.39653653e-01, -3.87317967e-03, -9.71483812e-03, -1.26913041e-02,
       -1.15593120e-01, -3.33911508e-01, -8.65109414e-02, -4.07476537e-02,
       -8.06936529e-03, -2.69682854e-02,  4.08813357e-04,  2.26994678e-02,
       -1.91396594e-01, -6.81699812e-03,  1.64208487e-02,  4.21346948e-02,
       -1.88420266e-02, -1.22717232e-01,  1.69042647e-01,  1.89623684e-02,
       -2.56160080e-01, -2.84627825e-02,  4.24961895e-02,  2.31859580e-01,
        1.12237439e-01, -1.78524479e-02,  2.50930637e-02, -1.46954864e-01,
        8.54523852e-02, -1.76840782e-01, -3.83254662e-02,  1.37237057e-01,
        6.43749982e-02,  1.06844231e-02,  4.35163304e-02, -1.25800580e-01,
        4.30877805e-02,  1.09991103e-01, -1.25825286e-01,  5.86707704e-03,
        8.21919292e-02, -1.09344438e-01, -2.91415881e-02, -1.44264624e-01,
        2.21533746e-01,  1.96443237e-02, -1.20953053e-01, -1.66505635e-01,
        1.67302951e-01, -7.43293017e-02, -9.87448469e-02,  6.81607723e-02,
       -1.66401953e-01, -1.93900943e-01, -2.80322611e-01, -2.19210982e-04,
        4.29982752e-01,  1.07281283e-01, -1.44085288e-01,  6.85325563e-02,
       -1.74324848e-02,  1.43818334e-02,  1.32702723e-01,  1.74371064e-01,
        5.35300560e-02,  1.86751783e-02, -1.02722272e-01,  2.70277858e-02,
        2.23684043e-01, -1.13195933e-01, -4.55808230e-02,  2.04259604e-01,
       -7.41649270e-02,  5.93469217e-02, -4.95752320e-03,  3.34659964e-03,
       -8.24945569e-02,  8.91204998e-02, -1.13434434e-01,  1.51956454e-02,
        3.77987996e-02, -4.49024923e-02, -1.01753324e-02,  1.26429066e-01,
       -1.01504065e-01,  6.88797235e-03, -1.36315450e-02,  1.25340782e-02,
        4.25134674e-02, -3.16483825e-02, -1.22000337e-01, -7.01046735e-02,
        8.97571370e-02, -2.42341787e-01,  2.04496995e-01,  1.70595497e-01,
        6.61701858e-02,  8.83736014e-02,  1.50460765e-01,  4.80800048e-02,
        2.50568688e-02, -4.27672938e-02, -2.44506165e-01, -5.89822307e-02,
        6.45350441e-02, -4.25964147e-02,  5.43840826e-02, -5.32909557e-02]



# X = np.array([feature_vector_CF121, feature_vector_AF1161, feature_vector_CM712])
# y = np.array([1.0, 1.0, 4.0])
# reg = LinearRegression().fit(X, y)

# # coef = reg.coef_
# # print('coef', coef)

# # intercept = reg.intercept_ 
# # print('intercept', intercept)

# pre = reg.predict(np.array([feature_vector_predict]))
# print("predict score:", pre)


X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])
y = np.array([1, 2, 3, 4])
kf = KFold(n_splits=2)#fold number

print(kf)  

for train_index, test_index in kf.split(X):
   print("TRAIN:", train_index, "TEST:", test_index)
   X_train, X_test = X[train_index], X[test_index]
   print('X_train', X_train, 'X_test', X_test)
   y_train, y_test = y[train_index], y[test_index]
   print('y_train', y_train, 'y_test', y_test)